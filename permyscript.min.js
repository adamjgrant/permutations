class PermyScript{constructor(t){this.string=t,this.tree_object={main:[]},this.last_unique_branch_name="0"}get unique_branch_name(){return this.last_unique_branch_name=String(parseInt(this.last_unique_branch_name)+1),this.last_unique_branch_name}get break_into_parts(){const t=[];return this.string.split("").reduce((n,e)=>{return e.match(/\(/)?(t.push(n),e):e.match(/\)/)?(t.push(n+e),""):n+e},""),this.tree_object.main=t,this}get convert_parens(){return this.tree_object.main=this.tree_object.main.map(t=>{return new Part(t)}),this}get delegate_to_branches(){let t={main:[]};this.tree_object.main.forEach(n=>{if(n.is_directive){const e=this.unique_branch_name;t[e]=n.branch}})}get compile(){this.break_into_parts.convert_parens.delegate_to_branches}}class Part{constructor(t){this.string=t}get is_directive(){return"("===this.string.substr(0,1)&&")"===this.string.substr(this.substr.length-1,1)}get branch(){return this.string.replace(/[()]/g,"").split("|")}}module.exports=PermyScript;