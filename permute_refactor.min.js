class Tree{constructor(e){this.object=e}get permutations(){this.translate_main;return[]}get translate_main(){return new Branch(this,this.object.main).translate_object}branch(e){return this.object[e]||[]}}class Branch{constructor(e,t){this.tree=e,this.object=t}get translate_object(){const e=new Leaf(this.object);return e.is_branch_reference?this.translate_branch_reference(e):this.object.map(e=>{const t=new Leaf(e);return t.is_branch_reference?this.translate_branch_reference(t):t.node})}translate_branch_reference(e){const t=this.tree.branch(e.node.branch);if(e.has_then_reference){const n=this.translate_then_reference(e);t.push(n)}return new Branch(this.tree,t).translate_object}translate_then_reference(e){let t=e.node.then;return"String"===t.constructor.name&&(t=[t]),new Branch(this.tree,t).translate_object}}class Leaf{constructor(e){this.node=e}get is_branch_reference(){return"object"==typeof this.node&&void 0!==this.node.branch}get has_then_reference(){return"object"==typeof this.node&&void 0!==this.node.then}}module.exports=Tree;