class Tree{constructor(t){this.object=t}get permutations(){return this.translate_main}get translate_main(){return new Branch(this,this.object.main).translate_object}branch(t){return this.object[t]||[]}}class Branch{constructor(t,e){this.tree=t,this.object=e}get translate_object(){return this.object.map(t=>{const e=new Leaf(t);return e.is_branch_reference?this.translate_branch_reference(e):e.node})}translate_branch_reference(t){const e=this.tree.branch(t.node.branch);return new Branch(this.tree,e).translate_object}}class Leaf{constructor(t){this.node=t}get is_branch_reference(){return"object"==typeof this.node&&void 0!==this.node.branch}}module.exports=Tree;