class Tree{constructor(t){this.object=t}get one(){return this.translated_branch.one()}get permutations(){return this.translated_branch.terminal_leaves()}get translated_branch(){return new Branch(this,this.translate_main)}get translate_main(){return new Branch(this,this.object.main).translate_object}branch(t){return this.object[t]||[]}}class Branch{constructor(t,n,e){this.tree=t,this.object=n,this.then_branches=e}terminal_leaves(t=""){return this.branches().length?this.leaves().reduce((n,e)=>{return n.concat(this.branches().reduce((n,r)=>{return n.concat(new Branch(this.tree,r).terminal_leaves(`${t}${e}`))},[]))},[]):this.leaves().map(n=>`${t}${n}`)}one(t=""){const n=`${t}${this.leaves(!0)}`;return this.branches().length?new Branch(this.tree,this.branches(!0)).one(n):n}leaves(t=!1){let n=this.object.filter(t=>new Leaf(t).is_terminal);const e=n.length?n:[""];return t?e[~~(e.length*Math.random())]:e}branches(t=!1){const n=this.object.filter(t=>new Leaf(t).is_branch);return t?n[~~(n.length*Math.random())]:n}get translate_object(){const t=new Leaf(this.object);return t.is_branch_reference?this.translate_branch_reference(t):(!this.branches().length&&this.has_then_branches&&this.object.push(this.then_branches),this.object.map(t=>{const n=new Leaf(t);return n.is_branch_reference?this.translate_branch_reference(n):n.is_branch?new Branch(this.tree,n.node).translate_object:n.node}))}translate_branch_reference(t){const n=this.duplicate_branch(this.tree.branch(t.node.branch));if(t.has_then_reference){const n=this.translate_then_reference(t);this.prepend_then_branch(n)}return new Branch(this.tree,n,this.then_branches).translate_object}translate_then_reference(t){let n=t.node.then;return"String"===n.constructor.name&&(n=[n]),new Branch(this.tree,n).translate_object}duplicate_branch(t){return JSON.parse(JSON.stringify(t))}prepend_then_branch(t){this.has_then_branches?this.then_branches=[...t,this.then_branches]:this.then_branches=t}get has_then_branches(){return void 0!==this.then_branches}}class Leaf{constructor(t){this.node=t}get is_branch(){return Array.isArray(this.node)}get is_terminal(){return"String"===this.node.constructor.name}get is_branch_reference(){return"object"==typeof this.node&&void 0!==this.node.branch}get has_then_reference(){return"object"==typeof this.node&&void 0!==this.node.then}}module.exports=Tree;