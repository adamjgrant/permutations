class Tree{constructor(t,n=!1){this.raw_object=t,this.one_random=n,this.errors=[]}get main(){return this.branch("main")}branch(t){return new Branch(this.translated_object[t],this)}get translated_object(){const t=this.raw_object.main;return{main:this.translate_branch_pointers(t)}}get permutations(){return this.main.permutations}get longest_key(){return Object.keys(this.raw_object).reduce((t,n)=>{return n.length>t.length?n:t},"")}randomly_orphaned_array(t){const n=t[~~(t.length*Math.random())];let e=[];return void 0!==n&&e.push(n),e}new_branch_reference(t,n=""){const e=`${this.longest_key}$`;return this.raw_object[e]=t,e}translate_branch_pointers(t,n=[]){if("Object"===t.constructor.name&&t.branch){let e=this.raw_object[t.branch];void 0!==e&&null!==e||this.errors.push(`The branch "${t.branch}" could not be found.`);let r=JSON.parse(JSON.stringify(e));return t.then&&("String"===t.then.constructor.name&&(t.then=[t.then]),t.then=this.translate_branch_pointers(t.then,n),t.then.push(n),n=t),this.translate_branch_pointers(r,n)}return t.push(n)}}class Leaf{constructor(t,n=[]){this.val=t,this._branches=n}get branches(){return this._branches.map(t=>new Branch(t.array,t.tree,this.val))}get terminal_leaves(){return this.branches.length?this.branches.reduce((t,n)=>{return t.concat(n.terminal_leaves)},[]):[this]}}class Branch{constructor(t,n,e=""){this.array=t,this.tree=n,this.prefix=e,this.memoized_leaves=[]}get permutations(){return this.terminal_leaves.map(t=>t.val)}get terminal_leaves(){return this.leaves.reduce((t,n)=>{return t.concat(n.terminal_leaves)},[])}get leaves(){if(this.memoized_leaves.length)return this.memoized_leaves;let t=this.tree.one_random?this.tree.randomly_orphaned_array(this.leaves_as_strings):this.leaves_as_strings;return this.sub_branches.length&&!t.length&&(t=[""]),this.memoized_leaves=t.map(t=>{return new Leaf(`${this.prefix}${t}`,this.sub_branches)}),this.memoized_leaves}get leaves_as_strings(){return this.array.filter(t=>"String"===t.constructor.name)}get sub_branches(){const t=this.array.filter(t=>Array.isArray(t)).map(t=>new Branch(t,this.tree));return this.tree.one_random?this.tree.randomly_orphaned_array(t):t}}module.exports=Tree;