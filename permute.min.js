class Tree{constructor(e,n=!1){this.raw_object=e,this.one_random=n,this.errors=[]}get main(){return this.branch("main")}branch(e){return new Branch(this.raw_object[e],this)}get translated_object(){return{main:this.raw_object.main.map(this.translate_branch_pointers)}}get permutations(){return this.main.permutations}get longest_key(){return Object.keys(this.raw_object).reduce((e,n)=>{return n.length>e.length?n:e},"")}randomly_orphaned_array(e){const n=e[~~(e.length*Math.random())];let t=[];return void 0!==n&&t.push(n),t}new_branch_reference(e,n=""){const t=`${this.longest_key}$`;return this.raw_object[t]=e,t}translate_branch_pointers(e){if("Object"===e.constructor.name&&e.branch){let n=this.raw_object[e.branch];void 0!==n&&null!==n||this.errors.push(`The branch "${e.branch}" could not be found.`);let t=JSON.parse(JSON.stringify(n));if(e.then){"String"===e.then.constructor.name&&(e.then=[e.then]);const n=this.tree.new_branch_reference(e.then),t={branch:n};branch=this.add_reference_to_branch_deep_end({branch:branch,reference:t})}return t.map(this.translate_branch_pointers)}return e}add_reference_to_branch_deep_end(e={branch:[],reference:{}}){const n=e.branch,t=e.reference;return"String"===n.constructor.name?n:new Branch(n,this.tree,this.prefix).sub_branches.length?n.map(e=>this.add_reference_to_branch_deep_end({branch:e,reference:t})):(n.push(t),n)}}class Leaf{constructor(e,n=[]){this.val=e,this._branches=n}get branches(){return this._branches.map(e=>new Branch(e.array,e.tree,this.val))}get terminal_leaves(){return this.branches.length?this.branches.reduce((e,n)=>{return e.concat(n.terminal_leaves)},[]):[this]}}class Branch{constructor(e,n,t=""){this.array=e,this.tree=n,this.prefix=t,this.memoized_leaves=[]}get permutations(){return this.terminal_leaves.map(e=>e.val)}get terminal_leaves(){return this.leaves.reduce((e,n)=>{return e.concat(n.terminal_leaves)},[])}get leaves(){if(this.memoized_leaves.length)return this.memoized_leaves;let e=this.tree.one_random?this.tree.randomly_orphaned_array(this.leaves_as_strings):this.leaves_as_strings;return this.sub_branches.length&&!e.length&&(e=[""]),this.memoized_leaves=e.map(e=>{return new Leaf(`${this.prefix}${e}`,this.sub_branches)}),this.memoized_leaves}get leaves_as_strings(){return this.array.filter(e=>"String"===e.constructor.name)}get sub_branches(){const e=this.array.filter(e=>Array.isArray(e)).map(e=>new Branch(e,this.tree));return this.tree.one_random?this.tree.randomly_orphaned_array(e):e}}module.exports=Tree;