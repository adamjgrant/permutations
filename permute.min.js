class Tree{constructor(e,t=!1){this.object=e,this.one_random=t}get main(){return this.branch("main")}branch(e){return new Branch(this.object[e],this)}get permutations(){return this.main.permutations}get longest_key(){return Object.keys(this.object).reduce((e,t)=>{return t.length>e.length?t:e},"")}randomly_orphaned_array(e){const t=e[~~(e.length*Math.random())];let n=[];return void 0!==t&&n.push(t),n}new_branch_reference(e,t=""){const n=`${this.longest_key}$`;return this.object[n]=e,n}}class Leaf{constructor(e,t=[]){this.val=e,this._branches=t}get branches(){return this._branches.map(e=>new Branch(e.array,e.tree,this.val))}get terminal_leaves(){return this.branches.length?this.branches.reduce((e,t)=>{return e.concat(t.terminal_leaves)},[]):[this]}}class Branch{constructor(e,t,n=""){this.array=e,this.tree=t,this.prefix=n,this.memoized_leaves=[]}get permutations(){return this.terminal_leaves.map(e=>e.val)}get terminal_leaves(){return this.leaves.reduce((e,t)=>{return e.concat(t.terminal_leaves)},[])}get leaves(){if(this.memoized_leaves.length)return this.memoized_leaves;let e=this.tree.one_random?this.tree.randomly_orphaned_array(this.leaves_as_strings):this.leaves_as_strings;return this.sub_branches.length&&!e.length&&(e=[""]),this.memoized_leaves=e.map(e=>{return new Leaf(`${this.prefix}${e}`,this.sub_branches)}),this.memoized_leaves}get leaves_as_strings(){return this.array.filter(e=>"String"===e.constructor.name)}translate_branch_pointers(){this.array.forEach((e,t)=>{if("Object"===e.constructor.name&&e.branch){let n=JSON.parse(JSON.stringify(this.tree.object[e.branch]));if(e.then){"String"===e.then.constructor.name&&(e.then=[e.then]);const t=this.tree.new_branch_reference(e.then),r={branch:t};n=this.add_reference_to_branch_deep_end({branch:n,reference:r})}this.array[t]=n}})}add_reference_to_branch_deep_end(e={branch:[],reference:{}}){const t=e.branch,n=e.reference;return"String"===t.constructor.name?t:new Branch(t,this.tree,this.prefix).sub_branches.length?t.map(e=>this.add_reference_to_branch_deep_end({branch:e,reference:n})):(t.push(n),t)}get sub_branches(){this.translate_branch_pointers();const e=this.array.filter(e=>Array.isArray(e)).map(e=>new Branch(e,this.tree));return this.tree.one_random?this.tree.randomly_orphaned_array(e):e}}module.exports=Tree;