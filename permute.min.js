class Tree{constructor(t){this.object=t}get one(){return this.translated_branch.one()}get permutations(){return this.translated_branch.terminal_leaves()}get translated_branch(){return new Branch(this,this.translate_main)}get translate_main(){return new Branch(this,this.object.main).translate_object}branch(t){return this.object[t]||[]}get unique_branch_name(){const t=Object.keys(this.object).reduce((t,n)=>{return n.length>t?n:t},""),n=`${t}-${Date.now()}`;return this.object[n]=[],n}}class Branch{constructor(t,n,e){this.tree=t,this.object=n,this.then_branches=e}terminal_leaves(t=""){return this.branches().length?this.leaves().reduce((n,e)=>{return n.concat(this.branches().reduce((n,r)=>{return n.concat(new Branch(this.tree,r).terminal_leaves(`${t}${e}`))},[]))},[]):this.leaves().map(n=>`${t}${n}`)}one(t=""){const n=`${t}${this.leaves(!0)}`;return this.branches().length?new Branch(this.tree,this.branches(!0)).one(n):n}leaves(t=!1){let n=this.object.filter(t=>new Leaf(t).is_string)||[];const e=n.length?n:[""];return t?e[~~(e.length*Math.random())]:e}branches(t=!1){const n=this.object.filter(t=>new Leaf(t).is_branch);return t?n[~~(n.length*Math.random())]:n}get translate_object(){const t=new Leaf(this.object);return t.has_directive("branch")?this.translate_branch_reference(t):(this.is_terminal_branch&&void 0!==this.then_branches&&this.object.push(this.then_branches),this.object.map(t=>{const n=new Leaf(t);if(n.has_directive("branch"))return this.translate_branch_reference(n);if(n.is_branch){const t=new Branch(this.tree,n.node);return t.is_terminal_branch||(t.then_branches=this.then_branches),t.translate_object}return n.node}))}get is_terminal_branch(){return!(this.branches().length&&void 0!==this.then_branches)&&this.object.every(t=>new Leaf(t).is_string)}translate_branch_reference(t){const n=this.duplicate_branch(this.tree.branch(t.node.branch)),e=new Branch(this.tree,n,this.then_branches);if(t.has_directive("then")){const n=this.translate_then_reference(t);e.prepend_then_branch(n)}return e.translate_object}translate_then_reference(t){let n=t.node.then;return"String"===n.constructor.name&&(n=[n]),new Branch(this.tree,n).translate_object}duplicate_branch(t){return JSON.parse(JSON.stringify(t))}prepend_then_branch(t){if(void 0!==t){const n=new Branch(this.tree,t,this.then_branches).translate_object;return this.is_terminal_branch?this.object=this.deep_end(t):this.prepend_to_non_terminal_branch(n)}}prepend_to_non_terminal_branch(t){const n=this.object.filter(t=>{return!new Leaf(t).is_string}).map(n=>{const e=new Branch(this.tree,n,this.then_branches).translate_object,r=this.duplicate_branch(this.tree.object),i=this.tree.unique_branch_name;return r.main={branch:i,then:t},r[i]=e,new Tree(r).translate_main});return this.object=[...this.leaves(),...n]}deep_end(t){if(!this.branches().length)return this.object.push(t),this.object;const n=this.branches().map(n=>n.deep_end(t));return this.object=[...this.leaves(),...n]}}class Leaf{constructor(t){this.node=t}get is_branch(){return Array.isArray(this.node)}get is_string(){return"String"===this.node.constructor.name}has_directive(t="branch"){return"object"==typeof this.node&&void 0!==this.node[t]}}class PermyScript{constructor(t){this.string=t,this.tree_object={main:[]},this.last_unique_branch_name="0"}get unique_branch_name(){return this.last_unique_branch_name=String(parseInt(this.last_unique_branch_name)+1),this.last_unique_branch_name}get break_into_parts(){const t=[];return this.string.split("").reduce((n,e)=>{return e.match(/\(/)?(t.push(n),e):e.match(/\)/)?(t.push(n+e),""):n+e},""),this.tree_object.main=t,this}get convert_parens(){return this.tree_object.main=this.tree_object.main.map(t=>{return new Part(t)}),this}get delegate_to_branches(){let t={main:[]};this.tree_object.main.forEach(n=>{if(n.is_directive){const e=this.unique_branch_name;t[e]=n.branch}})}get compile(){this.break_into_parts.convert_parens.delegate_to_branches}}class Part{constructor(t){this.string=t}get is_directive(){return"("===this.string.substr(0,1)&&")"===this.string.substr(this.substr.length-1,1)}get branch(){return this.string.replace(/[()]/g,"").split("|")}}module.exports=Tree;