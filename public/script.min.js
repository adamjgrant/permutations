const output_random_element=document.getElementById("output-random"),output_all_element=document.getElementById("output-all"),Permute=module.exports;let last_permutation;const permute=()=>{let t="Error parsing JSON";try{let e=[];for(;e.length<5;)e.push(random_permutation());t=e.map(t=>`<li>${t}</li>`).join(""),last_permutation=e,setRandomOutput(t)}catch(e){setRandomOutput(`${t}: ${e}`)}},random_permutation=()=>{return new Permute(JSON.parse(m.editor.act.get_value())).one},random_action_element=document.getElementById("random"),regenerate_action_element=document.getElementById("regenerate");random_action_element.addEventListener("click",()=>{last_permutation||k$.status({text:"Please generate a permutation first"});const t=random_permutation();return k$.status({text:`Copied to clipboard: "${t}"`}),navigator.clipboard.writeText(t)}),regenerate_action_element.addEventListener("click",()=>{permute()});const setRandomOutput=t=>{output_random_element.innerHTML=t,k$.status({text:"Done",type:"status-green"})},setAllOutput=t=>{output_all_element.innerHTML=t,k$.status({text:"Done",type:"status-green"})},regenerate_notice=document.getElementById("regenerate-notice"),setAllNotice=()=>{regenerate_notice.classList.remove("hide")},generate_all_element=document.getElementById("generate-all"),permute_all=()=>{regenerate_notice.classList.remove("notshown"),regenerate_notice.classList.add("hide");let t="Error parsing JSON";try{const e=new Permute(JSON.parse(m.editor.act.get_value())),n=e.permutations;t=n.map(t=>`<li>${t}</li>`).join(""),setAllOutput(t)}catch(e){setAllOutput(`${t}: ${e}`)}};generate_all_element.addEventListener("click",permute_all),document.getElementById("default").addEventListener("click",()=>{confirm("You will lose anything you've entered, are you sure?")&&m.editor.act.set_default_text()}),permute();const return_github_gist_error=()=>{k$.status({text:"Could not get github gist data",type:"status-red"})},get_gist_url=()=>{return new URL(location.href).searchParams.get("gist")||void 0},sanitize_gist_url=t=>{if(t){return t.match(/^https\:\/\/gist\.githubusercontent\.com\//)?t:t.match(/^https\:\/\/gist\.github\.com\//)?(console.error("URL must start with gist.githubusercontent. Try opening the gist in a new tab and following the redirect first"),void setTimeout(()=>{k$.status({text:"URL must start with gist.githubusercontent. Try opening the gist in a new tab and following the redirect first",type:"status-red",delay:3e3})},3e3)):void return_github_gist_error()}},get_gist_data=(t,e)=>{k$.status({text:"Loading from GitHub gist. Please hold...",type:"status-info"});var n=new XMLHttpRequest;n.open("GET",t,!0),n.onload=function(){if(!(this.status>=200&&this.status<400))return void return_github_gist_error();e(this.response)},n.onerror=function(){return_github_gist_error()},n.send()},gist_url=get_gist_url(),sanitized_gist_url=sanitize_gist_url(gist_url);sanitized_gist_url?get_gist_data(sanitized_gist_url,t=>{m.editor.act.set_value({value:t})}):m.persistence.act.set_initial_state();