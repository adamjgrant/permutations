const default_text=`{
    "main": [
      "Hey there", "Well hello", "Greetings", [
        ". ", [
          "Permy.link", "This permutation generator", [
            " ", [
              "lets you make many \\"permutations\\" of a line of text using specified variations.", {
                "branch": "keep reading"
              }
            ]
          ]
        ]
      ]
    ],
    "keep reading": [
      " ", [
        "Permy has some neat advanced features for keeping your configuration", { "branch": "tidy", "then":  ["too. ", { "branch": "about branches" }] }
      ]
    ],
    "tidy": [" ", ["tidy", "organized", "neat and streamlined", [" "]]],
    "about branches": [
      "You can create branches", "Branches can be created", { "branch": "why do you create branches?" }
    ],
    "why do you create branches?": [
      " which let you converge separate paths or just create named shortcuts. ", [
        "Learn more", "Read on", [
          " about", [
            " permy.link by clicking on the docs link below.", {
              "branch": "smiley"
            }
          ]
        ]
      ]
    ],
    "smiley": ["🤓", "😁", "😀"]
}`,editor=CodeMirror.fromTextArea(document.getElementById("code"),{matchBrackets:!0,autoCloseBrackets:!0,mode:"application/ld+json",lineWrapping:!0,lineNumbers:!0,theme:"solarized dark"}),output_element=document.getElementById("random-output"),Permute=module.exports;let last_permutation;editor.on("change",(t,e)=>{k$.status({text:"Permuting...",type:"status-blue"}),debounce(permute,"editor",500),debounce(persist,"persistence",500)});const permute=()=>{let t="Error parsing JSON";try{let e=[];for(;e.length<5;)e.push(random_permutation());t=e.map(t=>`<li>${t}</li>`).join(""),last_permutation=e,setOutput(t)}catch(e){setOutput(`${t}: ${e}`)}},random_permutation=()=>{return new Permute(JSON.parse(editor.getValue()),!0).permutations[0]},persist=()=>{localStorage.setObject("code",editor.getValue())},random_action_element=document.getElementById("random"),regenerate_action_element=document.getElementById("regenerate");random_action_element.addEventListener("click",()=>{last_permutation||k$.status({text:"Please generate a permutation first"});const t=random_permutation();return show_flash(`Copied to clipboard: "${t}"`),navigator.clipboard.writeText(t)}),regenerate_action_element.addEventListener("click",()=>{permute()});const show_flash=t=>{k$.status({text:t,type:"status-blue"})},setOutput=t=>{output_element.innerHTML=t,k$.status({text:"Done",type:"status-green"})};document.getElementById("clear").addEventListener("click",()=>{confirm("You will lose anything you've entered, are you sure?")&&editor.setValue(`{ 
  "main": [] 
}
    `)});const default_button=document.getElementById("default"),set_default_text=()=>{editor.setValue(default_text)};default_button.addEventListener("click",()=>{confirm("You will lose anything you've entered, are you sure?")&&set_default_text()});const gist_url_element=document.getElementById("gist_url");permute();const return_github_gist_error=()=>{k$.status({text:"Could not get github gist data",type:"status-red"})},get_gist_url=()=>{return new URL(location.href).searchParams.get("gist")||void 0},sanitize_gist_url=t=>{if(t){return t.match(/^https\:\/\/gist\.githubusercontent\.com\//)?t:t.match(/^https\:\/\/gist\.github\.com\//)?(console.error("URL must start with gist.githubusercontent. Try opening the gist in a new tab and following the redirect first"),void setTimeout(()=>{k$.status({text:"URL must start with gist.githubusercontent. Try opening the gist in a new tab and following the redirect first",type:"status-red",delay:3e3})},3e3)):void return_github_gist_error()}},get_gist_data=(t,e)=>{k$.status({text:"Loading from GitHub gist. Please hold...",type:"status-info"});var n=new XMLHttpRequest;n.open("GET",t,!0),n.onload=function(){if(!(this.status>=200&&this.status<400))return void return_github_gist_error();e(this.response)},n.onerror=function(){return_github_gist_error()},n.send()},previous_code=localStorage.getObject("code"),gist_url=get_gist_url(),sanitized_gist_url=sanitize_gist_url(gist_url),set_previous_code=()=>{previous_code?editor.setValue(previous_code):set_default_text()};sanitized_gist_url?get_gist_data(sanitized_gist_url,t=>{editor.setValue(t)}):set_previous_code();